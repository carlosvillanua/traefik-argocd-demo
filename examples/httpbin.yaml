apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
  namespace: traefik
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpbin
      version: v1
  template:
    metadata:
      labels:
        app: httpbin
        version: v1
    spec:
      containers:
        - image: carlostyk/httpbin-otel
          imagePullPolicy: IfNotPresent
          name: httpbin
          ports:
            - containerPort: 8080
          env:
            - name: OTEL_SERVICE_NAME
              value: "HttpBin"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "http://traefik-otel-collector-opentelemetry-collector.traefik.svc:4317"
          securityContext:
            runAsNonRoot: false
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: v1
kind: Service
metadata:
  name: httpbin-svc
  namespace: traefik
  labels:
    app: httpbin
spec:
  ports:
    - name: http
      port: 8000
      targetPort: 8080
  selector:
    app: httpbin
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: httpbin-ingress
  namespace: traefik
spec:
  entryPoints:
    - web
  routes:
  - match: Host(`httpbin.apigateway.docker.localhost`)
    services:
    - name: httpbin-svc
      port: 8000
    middlewares:
    - name: jwt
      namespace: traefik
    - name: opa
      namespace: traefik

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: opa
  namespace: traefik
spec:
  plugin:
    opa:
      policy: |
        package example.policies

        allow {
          [_, encoded] := split(input.headers.Authorization, " ")
          [header, payload, signature] = io.jwt.decode(encoded)
          payload["email"] == "admin@example.com"
        }
      forwardHeaders:
        Group: data.example.policies.grp

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: jwt
  namespace: traefik
spec:
  plugin:
    jwt:
      jwksUrl: http://keycloak-service.traefik.svc:7000/realms/keycloak-oauth/protocol/openid-connect/certs